Subscriber	midio_ui/observables/observables.html#Subscriber	observables: Subscriber	
Subscription	midio_ui/observables/observables.html#Subscription	observables: Subscription	
Observable	midio_ui/observables/observables.html#Observable	observables: Observable	
Subject	midio_ui/observables/observables.html#Subject	observables: Subject	
subscribe	midio_ui/observables/observables.html#subscribe,Observable[T],Subscriber[T]	observables: subscribe[T](self: Observable[T]; subscriber: Subscriber[T]): Subscription	
subscribe	midio_ui/observables/observables.html#subscribe,Subject[T],Subscriber[T]	observables: subscribe[T](self: Subject[T]; subscriber: Subscriber[T]): Subscription	
subscribe	midio_ui/observables/observables.html#subscribe,Observable[T],	observables: subscribe[T](self: Observable[T]; onNext: (T) -&gt; void): Subscription	
subscribe	midio_ui/observables/observables.html#subscribe,Observable[T],,	observables: subscribe[T](self: Observable[T]; onNext: (T) -&gt; void; onCompleted: () -&gt; void): Subscription	
subscribe	midio_ui/observables/observables.html#subscribe,Observable[T],,Option[proc)],Option[proc(Error)]	observables: subscribe[T](self: Observable[T]; onNext: (T) -&gt; void;\n             onCompleted: Option[proc (): void];\n             onError: Option[proc (i0: Error): void]): Subscription	
subscribe	midio_ui/observables/observables.html#subscribe,Subject[T],	observables: subscribe[T](self: Subject[T]; onNext: (T) -&gt; void): Subscription	
behaviorSubject	midio_ui/observables/observables.html#behaviorSubject,T	observables: behaviorSubject[T](value: T): Subject[T]	
create	midio_ui/observables/observables.html#create	observables: create[T](onSubscribe: (Subscriber[T]) -&gt; Subscription): Observable[T]	
create	midio_ui/observables/observables.html#create,seq[T]	observables: create[T](values: seq[T]): Observable[T]	
then	midio_ui/observables/observables.html#then,Observable[T],Observable[T]	observables: then[T](first: Observable[T]; second: Observable[T]): Observable[T]	
behaviorSubject	midio_ui/observables/observables.html#behaviorSubject,Observable[T]	observables: behaviorSubject[T](source: Observable[T]): Subject[T]	
subject	midio_ui/observables/observables.html#subject_2	observables: subject[T](): Subject[T]	
complete	midio_ui/observables/observables.html#complete,Subject[T]	observables: complete[T](self: Subject[T]): void	
next	midio_ui/observables/observables.html#next,Subject[T],T	observables: next[T](self: Subject[T]; newVal: T): void	
next	midio_ui/observables/observables.html#next,Subject[T],	observables: next[T](self: Subject[T]; transformer: (T) -&gt; T): void	
toObservable	midio_ui/observables/observables.html#toObservable.c,Subject[T]	observables: toObservable[T](subject: Subject[T]): Observable[T]	
map	midio_ui/observables/observables.html#map,Observable[T],	observables: map[T, R](self: Observable[T]; mapper: (T) -&gt; R): Observable[R]	
extract	midio_ui/observables/observables.html#extract.t,Observable[T],untyped	observables: extract[T](self: Observable[T]; prop: untyped): untyped	
filter	midio_ui/observables/observables.html#filter,Observable[T],	observables: filter[T](self: Observable[T]; predicate: (T) -&gt; bool): Observable[T]	
combineLatest	midio_ui/observables/observables.html#combineLatest,Observable[A],Observable[B],	observables: combineLatest[A, B, R](a: Observable[A]; b: Observable[B]; mapper: (A, B) -&gt; R): Observable[\n    R]	
merge	midio_ui/observables/observables.html#merge,Observable[A],Observable[A]	observables: merge[A](a: Observable[A]; b: Observable[A]): Observable[A]	
merge	midio_ui/observables/observables.html#merge,Observable[Observable[A]]	observables: merge[A](observables: Observable[Observable[A]]): Observable[A]	
switch	midio_ui/observables/observables.html#switch,Observable[Observable[A]]	observables: switch[A](observables: Observable[Observable[A]]): Observable[A]	
