Vec2	midio_ui/vec.html#Vec2	vec: Vec2	
vec2	midio_ui/vec.html#vec2,T,T	vec: vec2[T: Number](x: T; y: T): Vec2[T]	
lerp	midio_ui/vec.html#lerp,T,T,float	vec: lerp[T: Number](a: T; b: T; t: float): T	
zero	midio_ui/vec.html#zero	vec: zero(): Vec2[float]	
`-`	midio_ui/vec.html#-,Vec2[T: Number]	vec: `-`[T: Number](self: Vec2[T]): Vec2[T]	
infinity	midio_ui/vec.html#infinity	vec: infinity[T: Number](): Vec2[T]	
withX	midio_ui/vec.html#withX,Vec2[T: Number],Number	vec: withX[T: Number](self: Vec2[T]; x: Number): Vec2[T]	
withY	midio_ui/vec.html#withY,Vec2[T: Number],Number	vec: withY[T: Number](self: Vec2[T]; y: Number): Vec2[T]	
lerp	midio_ui/vec.html#lerp,Vec2[T: Number],Vec2[T: Number],float	vec: lerp[T: Number](self: Vec2[T]; other: Vec2[T]; t: float): Vec2[T]	
add	midio_ui/vec.html#add,Vec2[T: Number],Vec2[T: Number]	vec: add[T: Number](self: Vec2[T]; other: Vec2[T]): Vec2[T]	
`+`	midio_ui/vec.html#+.t,Vec2[T: Number],Vec2[T: Number]	vec: `+`[T](self: Vec2[T]; other: Vec2[T]): Vec2[T]	
addX	midio_ui/vec.html#addX,Vec2[T: Number],T	vec: addX[T: Number](self: Vec2[T]; other: T): Vec2[T]	
addY	midio_ui/vec.html#addY,Vec2[T: Number],T	vec: addY[T: Number](self: Vec2[T]; other: T): Vec2[T]	
directionTo	midio_ui/vec.html#directionTo,Vec2[T: Number],Vec2[T: Number]	vec: directionTo[T: Number](self: Vec2[T]; other: Vec2[T]): Vec2[T]	
sub	midio_ui/vec.html#sub,Vec2[T: Number],Vec2[T: Number]	vec: sub[T: Number](self: Vec2[T]; other: Vec2[T]): Vec2[T]	
`-`	midio_ui/vec.html#-.t,Vec2[T: Number],Vec2[T: Number]	vec: `-`[T](self: Vec2[T]; other: Vec2[T]): Vec2[T]	
angle	midio_ui/vec.html#angle,Vec2[T: Number]	vec: angle[T: Number](self: Vec2[T]): T	
normalized	midio_ui/vec.html#normalized,Vec2[T: Number]	vec: normalized[T: Number](self: Vec2[T]): Vec2[T]	
divide	midio_ui/vec.html#divide,Vec2[T: Number],Number	vec: divide[T: Number](self: Vec2[T]; val: Number): Vec2[T]	
divide	midio_ui/vec.html#divide,Vec2[T: Number],Vec2[T: Number]	vec: divide[T: Number](self: Vec2[T]; other: Vec2[T]): Vec2[T]	
mul	midio_ui/vec.html#mul,Vec2[T: Number],T	vec: mul[T: Number](self: Vec2[T]; other: T): Vec2[T]	
mul	midio_ui/vec.html#mul,Vec2[T: Number],Vec2[T: Number]	vec: mul[T: Number](self: Vec2[T]; other: Vec2[T]): Vec2[T]	
mul	midio_ui/vec.html#mul,Vec2[T: Number],T,T	vec: mul[T: Number](self: Vec2[T]; otherX: T; otherY: T): Vec2[T]	
rotate	midio_ui/vec.html#rotate,Vec2[T: Number],Number	vec: rotate[T: Number](self: Vec2[T]; rad: Number): Vec2[T]	
max	midio_ui/vec.html#max,Vec2[T: Number],Vec2[T: Number]	vec: max[T: Number](self: Vec2[T]; other: Vec2[T]): Vec2[T]	
min	midio_ui/vec.html#min,Vec2[T: Number],Vec2[T: Number]	vec: min[T: Number](self: Vec2[T]; other: Vec2[T]): Vec2[T]	
abs	midio_ui/vec.html#abs,Vec2[T: Number]	vec: abs[T: Number](self: Vec2[T]): Vec2[T]	
heightVec	midio_ui/vec.html#heightVec,Vec2[T: Number]	vec: heightVec[T: Number](self: Vec2[T]): Vec2[T]	
widthVec	midio_ui/vec.html#widthVec,Vec2[T: Number]	vec: widthVec[T: Number](self: Vec2[T]): Vec2	
inflate	midio_ui/vec.html#inflate,Vec2[T: Number],Thickness[T: Number]	vec: inflate[T: Number](self: Vec2[T]; thickness: Thickness[T]): Vec2[T]	
deflate	midio_ui/vec.html#deflate,Vec2[T: Number],Thickness[T: Number]	vec: deflate[T: Number](self: Vec2[T]; thickness: Thickness[T]): Vec2[T]	
equals	midio_ui/vec.html#equals,Vec2[T: Number],Vec2[T: Number]	vec: equals[T: Number](self: Vec2[T]; other: Vec2[T]): bool	
nonNegative	midio_ui/vec.html#nonNegative,Vec2[T: Number]	vec: nonNegative[T: Number](self: Vec2[T]): Vec2[T]	
constrain	midio_ui/vec.html#constrain,Vec2[T: Number],Vec2[T: Number]	vec: constrain[T: Number](self: Vec2[T]; constraint: Vec2[T]): Vec2[T]	
length	midio_ui/vec.html#length,Vec2[T: Number]	vec: length[T: Number](self: Vec2[T]): T	
distanceTo	midio_ui/vec.html#distanceTo,Vec2[T: Number],Vec2[T: Number]	vec: distanceTo[T: Number](self: Vec2[T]; other: Vec2[T]): T	
neg	midio_ui/vec.html#neg,Vec2[T: Number]	vec: neg[T: Number](self: Vec2[T]): Vec2[T]	
